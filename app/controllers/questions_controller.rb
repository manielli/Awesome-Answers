class QuestionsController < ApplicationController
    before_action :find_question, only: [:show, :edit, :update, :destroy, :publish_gist]
    before_action :authenticate_user!, except: [:index, :show, :publish_gist]
    before_action :authorize_user!, only: [:edit, :update, :destroy, :publish_gist]

    def new
        @question = Question.new
    end

    def create
        # render json: params => just to render the hash of the params
        @question = Question.new question_params
        @question.user = current_user # if current_user.present? we don't 
        # need this file because the user doesn't get to this page if they
        # are not a user
        
        if @question.save
            redirect_to question_path(@question)
        else
            render :new
        end
    end

    def index
        # byebug
        if params[:tag]
            @tag = Tag.find_or_initialize_by(name: params[:tag])
            @questions = @tag.questions.viewable.all_with_answer_counts.order(created_at: :desc)
        elsif current_user.admin?
            @questions = Question.all_with_answer_counts.order(created_at: :desc)
        else
            @questions = Question.viewable.all_with_answer_counts.order(created_at: :desc)
        end
        
        # @questions = current_user.liked_questions.all_with_answer_counts.order(created_at: :desc)
        # same thing and we used this in the liked action method down below at the bottom of this file

        # render json: @questions
        respond_to do |format|
            format.html { render :index }
            format.json { render json: @questions }
        end
    end

    def show
        # @question = Question.find params[:id]
        # We'll get rid of this because we have before_action at the top
        # and the private find_question method

        @answers = @question.answers.order(created_at: :desc)
        @answer = Answer.new
        @like = @question.likes.find_by(user: current_user)
        # @like = Like.find_by(current_user) // same thing
        # @like = @question.like_for(current_user)

        # @question.view_count += 1
        # @question.save
        # render json: @question

        # The method `update_columns` works just like `update`. However,
        # it will skip validations, skip callbacks and will not update `updated_at`
        # Unless you have a very good reason to use this DO NOT USE IT.

        @question.update_columns(view_count: @question.view_count + 1)
    end
    
    def edit
        # @question = Question.find params[:id]
        # We'll get rid of this because we have before_action at the top
        # and the private find_question method
    end
    
    def update
        # @question = Question.find params[:id]
        # We'll get rid of this because we have before_action at the top
        # and the private find_question method

        @question.slug = nil # this forces FriendlyID  to re-generate a slug
        if @question.update question_params
            redirect_to question_path(@question)
        else
            render :edit
        end
    end
    
    def destroy
        # question = Question.find params[:id]
        # question.destroy
        # We'll get rid of this because we have before_action at the top
        # and the private find_question method

        @question.destroy
        redirect_to questions_path
    end

    def liked
        @questions = current_user.liked_questions.all_with_answer_counts.order(created_at: :desc)
    end

    def publish_gist
        unless current_user.from_oauth?("github")
            flash[:warning] = "Must be authenticated with Github"
            redirect_to question_url(@question)
            return
        end

        token = current_user.oauth_token

        body = {
            description: "This Gist is generated by Awesome Answers",
            public: true,
            files: {
                "question-#{@question.id}.md": {
                    content: "###{@question.title}\n #{@question.body}"
                }
            }
        }

        response = HTTP
            .headers("Authorization" => "token #{token}")
            .headers("Content-Type" => "application/json")
            .post("https://api.github.com/gists", body: body.to_json )

        puts response
        redirect_to question_path(@question)
    end

    private
    def question_params
        # Use the require method on the params object to retrieve
        # the nested hash of a key usually corresponding with the
        # name-value pairs of a form.

        # Then, use `permit` to specify all input names that are allowed
        # as symbols.
        params.require(:question).permit(:title, :body, :tag_names)
    end

    def find_question
        @question = Question.find params[:id]
    end

    def authorize_user!
        # We add a ! to the name of this method as a convention, because
        # it can mutate the `response` object of our controller.
        # Terminating it prematurely.
        unless can?(:crud, @question)
            flash[:danger] = "Access Denied!"
            redirect_to question_path(@question)
        end
    end
end